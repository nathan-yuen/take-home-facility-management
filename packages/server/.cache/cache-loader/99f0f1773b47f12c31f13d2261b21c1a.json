{"remainingRequest":"/home/nathan/resq/resq/node_modules/ts-loader/index.js??ref--16-1!/home/nathan/resq/resq/packages/server/src/resolvers.ts","dependencies":[{"path":"/home/nathan/resq/resq/packages/server/src/resolvers.ts","mtime":1593383976100},{"path":"/home/nathan/resq/resq/node_modules/cache-loader/dist/cjs.js","mtime":1593200457581},{"path":"/home/nathan/resq/resq/node_modules/ts-loader/index.js","mtime":1593200459990}],"contextDependencies":[],"result":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport facilityRecords from './facilityRecords';\nexport default {\n    Query: {\n        hello: function (obj, _a) {\n            var subject = _a.subject;\n            return \"Hello, \" + subject + \"! from Server\";\n        },\n        facilities: function (parent, args) {\n            return facilityRecords.list(args);\n        },\n        facility: function (parent, args) {\n            return facilityRecords.get(args.id);\n        }\n    },\n    Mutation: {\n        addFacility: function (parent, args) {\n            return facilityRecords.create(args.facility);\n        },\n        removeFacility: function (parent, args) {\n            var id = args.id;\n            var success = facilityRecords.delete(id);\n            return {\n                success: success,\n                message: success ? undefined : \"Unable to remove facility record of ID: \" + id\n            };\n        },\n        updateFacility: function (parent, args) {\n            var facility = args.facility;\n            var results = facilityRecords.update(facility);\n            return __assign({}, results, { message: results.success ? undefined : \"Unable to udpate facility record of ID: \" + facility.id });\n        }\n    }\n};\n",{"version":3,"file":"/home/nathan/resq/resq/packages/server/src/resolvers.ts","sourceRoot":"","sources":["/home/nathan/resq/resq/packages/server/src/resolvers.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,OAAO,eAAe,MAAM,mBAAmB,CAAC;AAEhD,eAAe;IACb,KAAK,EAAE;QACL,KAAK,YAAC,GAAQ,EAAE,EAAgC;gBAA9B,oBAAO;YACvB,OAAO,YAAU,OAAO,kBAAe,CAAC;QAC1C,CAAC;QACD,UAAU,YACR,MAAW,EACX,IAA2F;YAE3F,OAAO,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpC,CAAC;QACD,QAAQ,YAAC,MAAW,EAAE,IAAoB;YACxC,OAAO,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACtC,CAAC;KACF;IACD,QAAQ,EAAE;QACR,WAAW,YAAC,MAAW,EAAE,IAAmE;YAC1F,OAAO,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC/C,CAAC;QACD,cAAc,YAAC,MAAW,EAAE,IAAoB;YACtC,IAAA,YAAE,CAAU;YACpB,IAAM,OAAO,GAAG,eAAe,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YAC3C,OAAO;gBACL,OAAO,SAAA;gBACP,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,6CAA2C,EAAI;aAC/E,CAAC;QACJ,CAAC;QACD,cAAc,YAAC,MAAW,EAAE,IAAkF;YACpG,IAAA,wBAAQ,CAAU;YAC1B,IAAM,OAAO,GAAG,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YACjD,oBACK,OAAO,IACV,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,6CAA2C,QAAQ,CAAC,EAAI,IAC/F;QACJ,CAAC;KACF;CACF,CAAC","sourcesContent":["import facilityRecords from './facilityRecords';\n\nexport default {\n  Query: {\n    hello(obj: any, { subject }: { subject: string }) {\n      return `Hello, ${subject}! from Server`;\n    },\n    facilities(\n      parent: any,\n      args: { filter: string; size: string; offset: number; limit: number; sizeFilter: string[] }\n    ) {\n      return facilityRecords.list(args);\n    },\n    facility(parent: any, args: { id: number }) {\n      return facilityRecords.get(args.id);\n    }\n  },\n  Mutation: {\n    addFacility(parent: any, args: { facility: { name: string; address: string; size: string } }) {\n      return facilityRecords.create(args.facility);\n    },\n    removeFacility(parent: any, args: { id: number }) {\n      const { id } = args;\n      const success = facilityRecords.delete(id);\n      return {\n        success,\n        message: success ? undefined : `Unable to remove facility record of ID: ${id}`\n      };\n    },\n    updateFacility(parent: any, args: { facility: { id: number; name?: string; address?: string; size?: string } }) {\n      const { facility } = args;\n      const results = facilityRecords.update(facility);\n      return {\n        ...results,\n        message: results.success ? undefined : `Unable to udpate facility record of ID: ${facility.id}`\n      };\n    }\n  }\n};\n"]}]}