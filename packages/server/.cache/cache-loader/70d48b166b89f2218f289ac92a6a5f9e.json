{"remainingRequest":"/home/nathan/resq/resq/node_modules/ts-loader/index.js??ref--16-1!/home/nathan/resq/resq/packages/server/src/facilityRecords.ts","dependencies":[{"path":"/home/nathan/resq/resq/packages/server/src/facilityRecords.ts","mtime":1593440525375},{"path":"/home/nathan/resq/resq/node_modules/cache-loader/dist/cjs.js","mtime":1593200457581},{"path":"/home/nathan/resq/resq/node_modules/ts-loader/index.js","mtime":1593200459990}],"contextDependencies":[],"result":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport fs from 'fs';\nimport loki from 'lokijs';\nvar db = new loki('DB');\nvar facilities = db.addCollection('facilities', {\n    indices: ['id'],\n    unique: ['id'],\n    exact: ['name', 'address', 'size'],\n    transactional: true\n});\nvar defaultSourcePath = './data.json';\nvar nextId = 0;\nexport default {\n    init: function () {\n        var rawJson = fs.readFileSync(defaultSourcePath, 'utf8');\n        var records = JSON.parse(rawJson);\n        records.forEach(function (record) { return facilities.insert(record); });\n        nextId = records[records.length - 1].id + 1;\n    },\n    create: function (input) {\n        var newFacility = facilities.insert(__assign({ id: nextId }, input));\n        nextId++;\n        return newFacility;\n    },\n    update: function (facility) {\n        var target = facilities.get(facility.id);\n        if (target) {\n            var updated = facilities.update(__assign({}, target, facility));\n            return { success: true, updated: updated };\n        }\n        return { success: false };\n    },\n    delete: function (id) {\n        var target = facilities.get(id);\n        if (target) {\n            var result = facilities.remove(target);\n            return !!result;\n        }\n        else {\n            return false;\n        }\n    },\n    get: function (id) {\n        return facilities.get(id);\n    },\n    list: function (arg) {\n        var filter = arg.filter, sizeFilter = arg.sizeFilter, offset = arg.offset, limit = arg.limit;\n        var query = facilities.chain();\n        var total;\n        var conditions = {};\n        if (filter) {\n            var regex = new RegExp(filter, 'i');\n            conditions['$or'] = [{ name: { $regex: regex } }, { address: { $regex: regex } }];\n        }\n        if (sizeFilter && sizeFilter.length > 0) {\n            conditions['$and'] = [{ size: { $containsAny: sizeFilter } }];\n        }\n        if (Object.keys(conditions).length) {\n            query.find(conditions);\n            total = facilities\n                .chain()\n                .find(conditions)\n                .count();\n        }\n        else {\n            total = facilities.count();\n        }\n        var items = query\n            .offset(offset)\n            .limit(limit)\n            .data();\n        return {\n            items: items,\n            total: total,\n            offset: offset,\n            limit: limit\n        };\n    }\n};\n",{"version":3,"file":"/home/nathan/resq/resq/packages/server/src/facilityRecords.ts","sourceRoot":"","sources":["/home/nathan/resq/resq/packages/server/src/facilityRecords.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs';\r\nimport loki from 'lokijs';\r\n\r\nconst db = new loki('DB');\r\nconst facilities = db.addCollection('facilities', {\r\n  indices: ['id'],\r\n  unique: ['id'],\r\n  exact: ['name', 'address', 'size'],\r\n  transactional: true\r\n});\r\n\r\nconst defaultSourcePath = './data.json';\r\n\r\n// In-memory DB, auto index increment not available\r\nlet nextId = 0;\r\n\r\nexport default {\r\n  init() {\r\n    const rawJson = fs.readFileSync(defaultSourcePath, 'utf8');\r\n    const records = JSON.parse(rawJson);\r\n    records.forEach((record: { id: string; name: string; address: string; size: string }) => facilities.insert(record));\r\n    nextId = records[records.length - 1].id + 1;\r\n  },\r\n  create(input: { name: string; address: string; size: string }) {\r\n    const newFacility = facilities.insert({ id: nextId, ...input });\r\n    // No built-in way of incrementing ids\r\n    nextId++;\r\n    return newFacility;\r\n  },\r\n  update(facility: {\r\n    id: number;\r\n    name?: string;\r\n    address?: string;\r\n    size?: string;\r\n  }): { success: boolean; updated?: object } {\r\n    const target = facilities.get(facility.id);\r\n\r\n    if (target) {\r\n      const updated = facilities.update({ ...target, ...facility });\r\n      return { success: true, updated };\r\n    }\r\n    return { success: false };\r\n  },\r\n  delete(id: number): boolean {\r\n    const target = facilities.get(id);\r\n    if (target) {\r\n      const result = facilities.remove(target);\r\n      return !!result;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n  get(id: number) {\r\n    return facilities.get(id);\r\n  },\r\n  list(arg: { filter: string; offset: number; limit: number; sizeFilter: string[] }) {\r\n    const { filter, sizeFilter, offset, limit } = arg;\r\n\r\n    const query = facilities.chain();\r\n    let total;\r\n    const conditions = {};\r\n\r\n    if (filter) {\r\n      const regex = new RegExp(filter, 'i');\r\n      conditions['$or'] = [{ name: { $regex: regex } }, { address: { $regex: regex } }];\r\n    }\r\n\r\n    if (sizeFilter && sizeFilter.length > 0) {\r\n      conditions['$and'] = [{ size: { $containsAny: sizeFilter } }];\r\n    }\r\n\r\n    if (Object.keys(conditions).length) {\r\n      query.find(conditions);\r\n      total = facilities\r\n        .chain()\r\n        .find(conditions)\r\n        .count();\r\n    } else {\r\n      total = facilities.count();\r\n    }\r\n\r\n    const items = query\r\n      .offset(offset)\r\n      .limit(limit)\r\n      .data();\r\n\r\n    return {\r\n      items,\r\n      total,\r\n      offset,\r\n      limit\r\n    };\r\n  }\r\n};\r\n"]}]}